{
  /********************************
   *                              *
   *      Editor Experience       *
   *                              *
   ********************************/

  // Prettier limits lines to 120 characters but does not auto-format comments. Drawing a ruler makes
  // it trivial to manually fit comments to the preferred limit.
  "editor.rulers": [120],

  // Keep files in sync when rapidly switching between editor and hot-reload, often forgetting to save. The delay
  // prevents auto-formatting while I type.
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 2000,

  // Limit the number of open tabs.
  //
  // This mitigates the pain of "tab overload" during complex tracing sessions. You know that experience where you need
  // the code that was just on your screen just 30 seconds ago and now you're frantically searching through a sea of
  // open tabs hoping if you hit Ctrl+Tab enough times it'll just show up but it's not omg where is it I just had it
  // here a minute ago where did it go? Sssshhhh **just breath** It'll be okay. We've all been there.
  //
  // This tactic helps in two ways. Most obviously, it prevents creating a sea of open tabs. Less obviously, and more
  // critically, it forces a mode of working where I must remain aware of what files I'm navigating between - keeping me
  // oriented at all times.
  "workbench.editor.limit.enabled": true,
  "workbench.editor.limit.value": 5,

  /********************************
   *                              *
   *    Code style and tooling    *
   *                              *
   ********************************/

  // Github complains when files are missing newlines. Final newlines alse help legibility when `cat`-ing files on the
  // command line.
  "files.insertFinalNewline": true,

  // I don't deeply nest often but, when I do, I prefer to keep everything on the screen.
  "editor.tabSize": 2,

  // Format as we go. (prettier)
  "prettier.enable": true,
  "editor.formatOnSave": true,
  "editor.formatOnSaveMode": "file",
  "editor.defaultFormatter": "esbenp.prettier-vscode",

  // Lint as we go. (eslint)
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "eslint.codeActionsOnSave.mode": "problems",
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],

  // Use Yarn.
  "eslint.packageManager": "yarn",

  /************************************
   *                                  *
   *  VS Code Application Experience  *
   *                                  *
   ************************************/

  // A high-contrast theme reduces effort to read code quickly and in smaller fonts. My eyes are not young anymore.
  "workbench.colorTheme": "Default High Contrast",

  // VS Code's new layout is a little tighter. No significant preference either way.
  "window.commandCenter": true,

  // Hide the Welcome screen on startup.
  "workbench.startupEditor": "none",

  // Disable distracting and unhelpful prompts.
  "explorer.confirmDragAndDrop": false,
  "extensions.ignoreRecommendations": true,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.updateImportsOnFileMove.enabled": "always"
}
